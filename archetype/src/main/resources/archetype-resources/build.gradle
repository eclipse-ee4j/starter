#if (${profile} == 'core')
    #set ($eeArtifactId = "jakarta.jakartaee-core-api")
#elseif (${profile} == 'web')
    #set ($eeArtifactId = "jakarta.jakartaee-web-api")
#elseif (${profile} == 'full')
    #set ($eeArtifactId = "jakarta.jakartaee-api")
#end
#if (${jakartaVersion} == '11')
    ## Update this once there is a proper release of EE 11.
    #set ($eeApiVersion = "11.0.0-RC1")
    #if (${javaVersion} == '17')
        #set ($glassfishVersion = "8.0.0-JDK17-M10")
    #else
        #set ($glassfishVersion = "8.0.0-M10")
    #end
    #set ($wildflyVersion = "35.0.1.Final")
#elseif (${jakartaVersion} == '10')
    #set ($eeApiVersion = "10.0.0")
    #set ($glassfishVersion = "7.0.23")
    #set ($payaraVersion = "6.2025.1")
    #set ($wildflyVersion = "35.0.1.Final")
#elseif (${jakartaVersion} == '9.1')
    #set ($eeApiVersion = "9.1.0")
    #if (${javaVersion} == '8')
        #set ($glassfishVersion = "6.0.0")
    #else
        #set ($glassfishVersion = "6.2.5")
    #end
    #set ($tomeeVersion = "9.1.3")
#elseif (${jakartaVersion} == '9')
    #set ($eeApiVersion = "9.0.0")
    #if (${javaVersion} == '8')
        #set ($glassfishVersion = "6.0.0")
    #else
        #set ($glassfishVersion = "6.2.5")
    #end
#elseif (${jakartaVersion} == '8')
    #set ($eeApiVersion = "8.0.0")
    #set ($glassfishVersion = "5.1.0")
    #set ($payaraVersion = "5.2022.5")
    #set ($tomeeVersion = "8.0.16")
    #set ($wildflyVersion = "26.1.3.Final")
#end
plugins {
    id 'java'
    id 'war'
#if (${runtime} == 'glassfish')
    id 'org.barfuin.gradle.taskinfo' version '2.1.0'
#elseif (${runtime} == 'wildfly')
    id 'org.wildfly.plugin' version '1.0.0.Final'
#elseif (${runtime} == 'open-liberty')
    id 'io.openliberty.tools.gradle.Liberty' version '3.8.3'
#end
}

group = '${groupId}'
version = '${version}'
description = 'This is a very simple Jakarta EE application generated by the official Eclipse Starter.'

java {
#if (${javaVersion} == '8')
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
#else
    sourceCompatibility = JavaVersion.VERSION_${javaVersion}
    targetCompatibility = JavaVersion.VERSION_${javaVersion}
#end
}

repositories {
    mavenCentral()
#if (${jakartaVersion} == '11' && ${runtime} == 'open-liberty')
    maven {
        url 'https://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/beta/'
    }
#end
}

dependencies {
    providedCompile 'jakarta.platform:${eeArtifactId}:${eeApiVersion}'
#if ((${runtime} == 'payara') and (${profile} != 'full'))
    // Embedded Jakarta EE runtime
    providedCompile 'fish.payara.extras:payara-micro:${payaraVersion}'
#end
}

war {
    archiveFileName = '${artifactId}.war'
}

#if (${runtime} == 'glassfish')
// Execute './gradlew cargoRunLocal' to run the application
configurations {
    glassfish
}

dependencies {
    glassfish 'org.glassfish.main.distributions:${glassfishArtifact}:${glassfishVersion}@zip'
}

task unzipGlassfish(type: Copy) {
    from zipTree(configurations.glassfish.singleFile)
    into "${buildDir}/glassfish"
}

task cargoRunLocal {
    dependsOn unzipGlassfish, war
    doLast {
        def glassfishHome = file("${buildDir}/glassfish/glassfish8")
        def asadmin = glassfishHome.path + '/bin/asadmin'
        
        exec {
            commandLine asadmin, 'start-domain'
        }
        
        exec {
            commandLine asadmin, 'deploy', '--force=true', war.archiveFile.get().asFile
        }
        
        println "Application deployed. Access it at: http://localhost:8080/${artifactId}"
        println "Press Ctrl+C to stop the server"
        
        Thread.sleep(Long.MAX_VALUE)
    }
}
#elseif (${runtime} == 'tomee')
// Execute './gradlew tomeeRun' to run the application
// TomEE Gradle plugin support is limited, consider using Maven for TomEE projects
task tomeeRun {
    doLast {
        println "TomEE Gradle plugin support is limited. Please use Maven build system for TomEE projects."
        println "Or manually download TomEE and deploy the generated WAR file."
    }
}
#elseif (${runtime} == 'payara')
    #if (${profile} != 'full')
// Execute './gradlew payaraStart' to run the application
task payaraStart(type: JavaExec) {
    dependsOn war
    classpath = configurations.providedCompile
    mainClass = 'fish.payara.micro.PayaraMicro'
    args = ['--deploy', war.archiveFile.get().asFile, '--contextroot', '/']
}
    #else
// Execute './gradlew cargoRunLocal' to run the application
configurations {
    payara
}

dependencies {
    payara 'fish.payara.distributions:payara:${payaraVersion}@zip'
}

task unzipPayara(type: Copy) {
    from zipTree(configurations.payara.singleFile)
    into "${buildDir}/payara"
}

task cargoRunLocal {
    dependsOn unzipPayara, war
    doLast {
        def payaraHome = file("${buildDir}/payara/payara6")
        def asadmin = payaraHome.path + '/bin/asadmin'
        
        exec {
            commandLine asadmin, 'start-domain'
        }
        
        exec {
            commandLine asadmin, 'deploy', '--force=true', war.archiveFile.get().asFile
        }
        
        println "Application deployed. Access it at: http://localhost:8080/${artifactId}"
        println "Press Ctrl+C to stop the server"
        
        Thread.sleep(Long.MAX_VALUE)
    }
}
    #end
#elseif (${runtime} == 'wildfly')
// Execute './gradlew wildflyRun' to run the application
wildfly {
    version = '${wildflyVersion}'
    #if (${profile} == 'full')
    serverConfig = 'standalone-full.xml'
    #end
}
#elseif (${runtime} == 'open-liberty')
// Execute './gradlew libertyRun' to run the application
liberty {
    #if (${jakartaVersion} == '11')
    runtime = [group: 'io.openliberty.beta', name: 'openliberty-runtime', version: 'LATEST']
    #else
    installDir = file("${buildDir}/liberty")
    #end
    server {
        name = '${artifactId}'
        configDirectory = file('src/main/liberty/config')
        apps = [war]
        looseApplication = false
    }
}
#end

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}