#set ($jakartaApiVersion = "8.0.0")
#set ($javaVersion = "1.8")
#if (${jakartaVersion} == '9')
#set ($jakartaApiVersion = "9.1.0")
#set ($javaVersion = "11")
#end
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>${groupId}</groupId>
	<artifactId>${artifactId}</artifactId>
	<version>${version}</version>
	<packaging>war</packaging>

	<name>jakartaee-cafe</name>
	<description>
	    This is a very simple Jakarta EE application generated by the official Eclipse
		Starter. It is a simple RESTful CRUD service that uses a
		representative set of Jakarta EE technologies such as REST, Enterprise
		Beans, CDI, Persistence, JSON Binding and Bean Validation.
        </description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.report.sourceEncoding>UTF-8</project.report.sourceEncoding>
		<maven.compiler.target>$javaVersion</maven.compiler.target>
		<maven.compiler.source>$javaVersion</maven.compiler.source>
		<jakartaee-api.version>$jakartaApiVersion</jakartaee-api.version>
	</properties>

	<dependencyManagement>
		<!-- Arquillian Bill Of Management used to reduce collision between testing dependencies. 
                Using a dependency manager we don't need to specify the version of each Arquillian dependency. -->
		<dependencies>
			<dependency>
				<groupId>org.jboss.arquillian</groupId>
				<artifactId>arquillian-bom</artifactId>
				<version>1.6.0.Final</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>jakarta.platform</groupId>
			<artifactId>jakarta.jakartaee-api</artifactId>
			<version>${jakartaee-api.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Required for Java SE 9+ -->
		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-runtime</artifactId>
			<version>2.3.6</version>
			<scope>provided</scope>
		</dependency>
#if (${jakartaVersion} == '8')
		#if (${runtime} == 'glassfish')
		<!-- Embedded database -->
		<dependency>
			<groupId>org.apache.derby</groupId>
			<artifactId>derby</artifactId>
			<version>10.15.2.0</version>
			<scope>runtime</scope>
		</dependency>
		#elseif (${runtime} == 'tomee')
		<!-- Embedded Jakarta EE runtime -->
		<dependency>
			<groupId>org.apache.tomee</groupId>
			<artifactId>apache-tomee</artifactId>
			<version>8.0.10</version>
			<classifier>plume</classifier>
			<type>zip</type>
		</dependency>		

		<!-- Embedded database -->
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>2.6.1</version>
			<scope>runtime</scope>
		</dependency>		
		#else
		<!-- Embedded Jakarta EE runtime -->
		<dependency>
			<groupId>fish.payara.extras</groupId>
			<artifactId>payara-micro</artifactId>
			<version>5.2021.10</version>
			<scope>test</scope>
		</dependency>

		<!-- Embedded database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.1.210</version>
			<scope>runtime</scope>
		</dependency>
		#end
#else
		#if (${runtime} == 'payara')
		<!-- Embedded Jakarta EE runtime -->
		<dependency>
			<groupId>fish.payara.extras</groupId>
			<artifactId>payara-micro</artifactId>
			<version>6.2021.1.Alpha1</version>
			<scope>test</scope>
		</dependency>
		<!-- Embedded database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.1.210</version>
			<scope>runtime</scope>
		</dependency>
		#elseif (${runtime} == 'tomee')
		<dependency>
			<groupId>com.fasterxml.jackson.jakarta.rs</groupId>
			<artifactId>jackson-jakarta-rs-json-provider</artifactId>
			<version>2.13.0</version>
		</dependency>
		<!-- Embedded database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.1.210</version>
			<scope>runtime</scope>
		</dependency>
		#else
		<dependency>
			<groupId>org.glassfish.hk2</groupId>
			<artifactId>hk2-locator</artifactId>
			<version>3.0.3</version>
		</dependency>
		<!-- Embedded database -->
		<dependency>
			<groupId>org.apache.derby</groupId>
			<artifactId>derby</artifactId>
			<version>10.15.2.0</version>
			<scope>runtime</scope>
		</dependency>
		#end
#end

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-impl-maven</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<scope>test</scope>
		</dependency>
#if (${jakartaVersion} == '8')
		#if (${runtime} == 'glassfish')
		<dependency>
			<groupId>org.jboss.arquillian.container</groupId>
			<artifactId>arquillian-glassfish-managed-3.1</artifactId>
			<version>1.0.2</version>
			<scope>test</scope>
		</dependency>		
		#elseif (${runtime} == 'tomee')
		<dependency>
			<groupId>org.apache.tomee</groupId>
			<artifactId>arquillian-tomee-remote</artifactId>
			<version>8.0.10</version>
			<scope>test</scope>
		</dependency>		
		#else
		<dependency>
			<groupId>fish.payara.arquillian</groupId>
			<artifactId>arquillian-payara-micro-managed</artifactId>
			<version>2.4.1</version>
			<scope>test</scope>
		</dependency>
		#end
#else
		#if (${runtime} == 'payara')
		<dependency>
			<groupId>fish.payara.arquillian</groupId>
			<artifactId>arquillian-payara-micro-managed</artifactId>
			<version>3.0.alpha3</version>
			<scope>test</scope>
		</dependency>
		#elseif (${runtime} == 'glassfish')
		<dependency>
			<groupId>org.jboss.arquillian.container</groupId>
			<artifactId>arquillian-glassfish-managed-6</artifactId>
			<version>1.0.0.Alpha1</version>
			<scope>test</scope>
		</dependency>
		#end
#end
	</dependencies>

	<build>
		<finalName>jakartaee-cafe</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.2.2</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
#if (${jakartaVersion} == '8')
			#if (${runtime} == 'glassfish')
			<!--Download GlassFish for Aquillian -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<id>unpack</id>
						<phase>generate-test-resources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.glassfish.main.distributions</groupId>
									<artifactId>glassfish</artifactId>
									<version>5.1.0</version>
									<type>zip</type>
									<overWrite>false</overWrite>
									<outputDirectory>/tmp</outputDirectory>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Execute 'mvn clean package cargo:run' to run the application. -->
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven3-plugin</artifactId>
				<version>1.9.10</version>
				<configuration>
					<container>
						<containerId>glassfish5x</containerId>
						<zipUrlInstaller>
							<url>https://repo.maven.apache.org/maven2/org/glassfish/main/distributions/glassfish/5.1.0/glassfish-5.1.0.zip</url>
						</zipUrlInstaller>
					</container>
				</configuration>
			</plugin>					
			#elseif (${runtime} == 'tomee')
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<systemPropertyVariables>
						<tomee.classifier>plume</tomee.classifier>
						<tomee.version>8.0.10</tomee.version>
					</systemPropertyVariables>
				</configuration>
			</plugin>
			
			<!-- Execute 'mvn clean package tomee:run' to run the application. -->
			<plugin>
				<groupId>org.apache.tomee.maven</groupId>
				<artifactId>tomee-maven-plugin</artifactId>
				<version>8.0.10</version>
				<configuration>
					<tomeeClassifier>plume</tomeeClassifier>
					<removeDefaultWebapps>false</removeDefaultWebapps>
				</configuration>
			</plugin>				
			#else
			<!-- Execute 'mvn clean package payara-micro:start' to run the application. -->
			<plugin>
				<groupId>fish.payara.maven.plugins</groupId>
				<artifactId>payara-micro-maven-plugin</artifactId>
				<version>1.4.0</version>
				<executions>
					<execution>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<artifactItem>
						<groupId>fish.payara.extras</groupId>
						<artifactId>payara-micro</artifactId>
						<version>5.2021.10</version>
					</artifactItem>
					<deployWar>true</deployWar>
					<contextRoot>/</contextRoot>
				</configuration>
			</plugin>
			#end
#else
			#if (${runtime} == 'tomee')
			<plugin>
				<groupId>org.apache.tomee.maven</groupId>
				<artifactId>tomee-maven-plugin</artifactId>
				<version>8.0.10</version>
				<configuration>

					<tomeeVersion>9.0.0-M7</tomeeVersion>
					<tomeeArtifactId>apache-tomee</tomeeArtifactId>

					<tomeeGroupId>org.apache.tomee</tomeeGroupId>
					<tomeeClassifier>plume</tomeeClassifier>
				</configuration>
			</plugin>
			#elseif (${runtime} == 'glassfish')
			<!--Download GlassFish for Aquillian -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<id>unpack</id>
						<phase>generate-test-resources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.glassfish.main.distributions</groupId>
									<artifactId>glassfish</artifactId>
									<version>6.2.5</version>
									<type>zip</type>
									<overWrite>false</overWrite>
									<outputDirectory>/tmp</outputDirectory>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Execute 'mvn clean package cargo:run' to run the application. -->
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven3-plugin</artifactId>
				<version>1.9.10</version>
				<configuration>
					<container>
						<containerId>glassfish6x</containerId>
						<zipUrlInstaller>
							<url>https://repo.maven.apache.org/maven2/org/glassfish/main/distributions/glassfish/6.2.5/glassfish-6.2.5.zip</url>
						</zipUrlInstaller>
					</container>
				</configuration>
			</plugin>
			#else
			<plugin>
				<groupId>fish.payara.maven.plugins</groupId>
				<artifactId>payara-micro-maven-plugin</artifactId>
				<version>1.4.0</version>
				<executions>
					<execution>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<artifactItem>
						<groupId>fish.payara.extras</groupId>
						<artifactId>payara-micro</artifactId>
						<version>6.2021.1.Alpha1</version>
					</artifactItem>
					<deployWar>true</deployWar>
					<contextRoot>/</contextRoot>
				</configuration>
			</plugin>
			#end
#end
		</plugins>
	</build>
</project>